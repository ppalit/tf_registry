name: 'Terraform'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    #- name: Setup Terraform
    #  uses: hashicorp/setup-terraform@v1
    #  with:
    #    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}


    - name: Tarzip Modules Directory
      run: tar -czf modules-azurerm-storage-account.tar.gz azure/storage_account/.

    - name: pwd
      run: |
          ls -ltr
          pwd
          
    - name: Get Module Version
      id: get_version
      run: |
          incrementedVersion=$(cat azure/storage_account/version.txt)
          echo "version=$incrementedVersion" >> $GITHUB_ENV

    - name: Echo Module Version
      run: echo "${{ env.version }}"

    - name: Create JSON Payload
      run: |
          payload=$(cat <<EOF
          {
            "data": {
              "type": "registry-module-versions",
              "attributes": {
                "version": "${{ env.version }}"
              }
            }
          }
          EOF
          )
          echo "$payload" > payload.json
          
          apiUrl="https://app.terraform.io/api/v2/organizations/smbcgroup/registry-modules/private/smbcgroup/storage-account/azurerm/versions"
          payloadFile="payload.json"

          response=$(curl --header "Authorization: Bearer ${{ secrets.TERRAFORM_API }}" \
                            --header "Content-Type: application/vnd.api+json" \
                            --request POST \
                            --data @$payloadFile $apiUrl)

          echo "$response" > response.json
          echo $response
          uploadLink=$(jq -r '.data.links.upload' response.json)
          echo $uploadLink
            
          responseUpload=$(curl -X PUT -F "file=modules-azurerm-storage-account.tar.gz" $uploadLink)
          echo $responseUpload

